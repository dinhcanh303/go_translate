// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/language_detection.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LanguageDetectionService_DetectLanguage_FullMethodName = "/language_detection.LanguageDetectionService/DetectLanguage"
)

// LanguageDetectionServiceClient is the client API for LanguageDetectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageDetectionServiceClient interface {
	DetectLanguage(ctx context.Context, in *DetectLanguageRequest, opts ...grpc.CallOption) (*DetectLanguageResponse, error)
}

type languageDetectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageDetectionServiceClient(cc grpc.ClientConnInterface) LanguageDetectionServiceClient {
	return &languageDetectionServiceClient{cc}
}

func (c *languageDetectionServiceClient) DetectLanguage(ctx context.Context, in *DetectLanguageRequest, opts ...grpc.CallOption) (*DetectLanguageResponse, error) {
	out := new(DetectLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageDetectionService_DetectLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageDetectionServiceServer is the server API for LanguageDetectionService service.
// All implementations must embed UnimplementedLanguageDetectionServiceServer
// for forward compatibility
type LanguageDetectionServiceServer interface {
	DetectLanguage(context.Context, *DetectLanguageRequest) (*DetectLanguageResponse, error)
	mustEmbedUnimplementedLanguageDetectionServiceServer()
}

// UnimplementedLanguageDetectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLanguageDetectionServiceServer struct {
}

func (UnimplementedLanguageDetectionServiceServer) DetectLanguage(context.Context, *DetectLanguageRequest) (*DetectLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectLanguage not implemented")
}
func (UnimplementedLanguageDetectionServiceServer) mustEmbedUnimplementedLanguageDetectionServiceServer() {
}

// UnsafeLanguageDetectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageDetectionServiceServer will
// result in compilation errors.
type UnsafeLanguageDetectionServiceServer interface {
	mustEmbedUnimplementedLanguageDetectionServiceServer()
}

func RegisterLanguageDetectionServiceServer(s grpc.ServiceRegistrar, srv LanguageDetectionServiceServer) {
	s.RegisterService(&LanguageDetectionService_ServiceDesc, srv)
}

func _LanguageDetectionService_DetectLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageDetectionServiceServer).DetectLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageDetectionService_DetectLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageDetectionServiceServer).DetectLanguage(ctx, req.(*DetectLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageDetectionService_ServiceDesc is the grpc.ServiceDesc for LanguageDetectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageDetectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "language_detection.LanguageDetectionService",
	HandlerType: (*LanguageDetectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectLanguage",
			Handler:    _LanguageDetectionService_DetectLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/language_detection.proto",
}
